require 'json'

# Classe para representar uma observação
class Observation
  attr_accessor :type, :name, :instrument, :target, :parameters

  def initialize(type, name, instrument, target, parameters)
    @type = type
    @name = name
    @instrument = instrument
    @target = target
    @parameters = parameters
  end
end

# Classe para representar um processamento
class Processing
  attr_accessor :type, :name, :input, :output, :language, :code

  def initialize(type, name, input, output, language, code)
    @type = type
    @name = name
    @input = input
    @output = output
    @language = language
    @code = code
  end
end

# Carregar o JSON a partir de um arquivo
file = File.read('payload.json')
data = JSON.parse(file)

# Função para processar uma observação
def process_observation(observation)
  puts "Processando observação: #{observation.name}"
  # Aqui você pode adicionar a lógica para processar a observação
  puts "Tipo: #{observation.type}"
  puts "Instrumento: #{observation.instrument}"
  puts "Alvo: #{observation.target}"
  observation.parameters.each do |key, value|
    puts "#{key}: #{value}"
  end
  puts
end

# Função para processar um processamento
def process_processing(processing)
  puts "Processando #{processing.name}"
  # Aqui você pode adicionar a lógica para processar o processamento
  puts "Tipo: #{processing.type}"
  puts "Entrada: #{processing.input}"
  puts "Saída: #{processing.output}"
  puts "Linguagem: #{processing.language}"
  puts "Código:"
  puts processing.code
  puts
end

# Iterar sobre as tarefas no JSON
data['tasks'].each do |task|
  case task['type']
  when 'observation'
    observation = Observation.new(
      task['type'],
      task['name'],
      task['instrument'],
      task['target'],
      task['parameters']
    )
    process_observation(observation)
  when 'processing'
    processing = Processing.new(
      task['type'],
      task['name'],
      task['input'],
      task['output'],
      task['language'],
      task['code']
    )
    process_processing(processing)
  else
    puts "Tipo de tarefa não reconhecido: #{task['type']}"
  end
end
